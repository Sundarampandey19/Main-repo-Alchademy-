generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  hashedPassword String?
  email          String   @unique
  imgUrl         String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  Course         Course?   @relation(fields: [courseId], references: [id])
  courseId       String?

  @@map(name: "user")
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  users       User[]
  chapters    Chapter[]
  subject     Subject[]
  createdAt   DateTime  @default(now())
}

model Subject {
  id      String    @id @default(cuid())
  title   String
  chapter Chapter[]
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  videos    String[]
  pdfLink   String
  quizzes   Quiz[]
  createdAt DateTime @default(now())
  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?
}

model Quiz {
  id            String   @id @default(cuid())
  question      String
  options       String[]
  correctOption Int // Index of the correct option in the options array
  chapter       Chapter  @relation(fields: [chapterId], references: [id])
  chapterId     String
  createdAt     DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
